// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  firstName    String
  lastName     String
  picture      String?
  posts        Post[]
  rooms        Room[]
  favorites    Favorite[]
  reservations Reservation[]
}

model Post {
  id        String  @id @default(uuid())
  title     String
  content   String
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String
}

model Room {
  id String @id @default(uuid())

  name         String?
  description  String?
  guests       String?
  bedrooms     String?
  bathrooms    String?
  country      String?
  photo        String?
  price        Int?
  categoryName String?
  favorites    Favorite[]
  reservations Reservation[]

  addedCategory    Boolean @default(false)
  addedDescription Boolean @default(false)
  addedLocation    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Favorite {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  room      Room?    @relation(fields: [roomId], references: [id])
  roomId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String    @id @default(uuid())
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  room      Room?     @relation(fields: [roomId], references: [id])
  roomId    String?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
